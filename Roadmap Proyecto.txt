Quiero que me gu√≠es paso a paso para preparar mi aplicaci√≥n web fullstack en producci√≥n.

Estoy usando React + Vite en el frontend, y Python Flask + SQLite (temporal) en el backend. Todo el c√≥digo est√° versionado en GitHub, con la siguiente estructura de carpetas:

/frontend ‚Üí React + Vite  
/backend  ‚Üí Python Flask + SQLite

---

üéØ Objetivo

Tener la app deployada y funcionando, con:

- Autenticaci√≥n y roles de usuario ("free" / "premium")
- Conexi√≥n del backend a OpenAI para generar respuestas
- Control de acceso en el frontend seg√∫n el rol
- Almacenamiento de archivos adjuntos
- Historial de chat por usuario (limitado a √∫ltimos 5)
- Deploy en producci√≥n del frontend y backend

---

üî∏ Infraestructura deseada

- Hosting gratuito para el frontend (Firebase Hosting o Vercel)
- Hosting gratuito para el backend (Railway o Render)
- Firebase para:
  - Autenticaci√≥n (Firebase Auth)
  - Base de datos (Firestore)
  - Almacenamiento de archivos (Storage, opcional)

---

üî∏ Requisitos funcionales

1. Autenticaci√≥n con Firebase (email/password, opcionalmente Google)
2. Dos roles: "premium" (puede chatear) y "free" (solo lectura)
3. Control de acceso en frontend: si el usuario no es premium, desactivar input del chat
4. Conexi√≥n del backend Flask con OpenAI API
5. Almacenamiento del historial de chats (√∫ltimos 5) por usuario
6. Env√≠o de archivos adjuntos desde frontend (procesados por backend)
7. Deploy final:
   - Frontend: en Firebase Hosting o Vercel
   - Backend: en Railway (con variables de entorno y CORS habilitado)
   - Dominio opcional

---

üî∏ Flujo de trabajo ideal

- Preparar entorno `.env` en frontend y backend
- Integrar Firebase Auth en React (login, logout, sesi√≥n)
- Guardar datos del usuario + rol en Firestore al registrarse
- A√±adir middleware de autenticaci√≥n en Flask (verificar JWT ID Token de Firebase)
- Implementar en backend rutas:
   - `/chat` (env√≠a mensaje y archivo a OpenAI)
   - `/upload` (procesar imagen o guardar)
- Conectar frontend a backend usando fetch con ID Token de Firebase
- En producci√≥n: deploy de frontend (Firebase Hosting) y backend (Railway)
- Asegurar seguridad m√≠nima: CORS, variables secretas, manejo de errores

---

üß± Arquitectura recomendada

| Componente           | Herramienta elegida        |
|----------------------|-----------------------------|
| Autenticaci√≥n        | Firebase Auth               |
| Base de datos        | Firebase Firestore          |
| Archivos adjuntos    | Firebase Storage            |
| Backend API          | Flask en Railway            |
| Frontend             | React + Vite (deploy en Firebase) |
| Roles y permisos     | Guardados en Firestore, verificados en frontend y backend |
| Procesamiento de archivos | Backend Flask con an√°lisis OpenAI |

---

üìÅ Firestore: estructura sugerida

users/  
  userId (Firebase UID)  
    - nombre: string  
    - apellido: string  
    - email: string  
    - pais: string  
    - fechaAlta: timestamp  
    - rol: "free" | "premium"  

chats/  
  userId/  
    chatId/  
      - mensajeUsuario: string  
      - respuestaBot: string  
      - timestamp: timestamp  
      - archivoURL?: string  

Limitar a √∫ltimos 5 chats por usuario: si se guarda el sexto, eliminar el m√°s antiguo. Esto se puede hacer desde el backend Flask (sin usar Firebase Functions por ahora).

---

üîê Flujo de autenticaci√≥n y permisos

1. Usuario se registra o loguea con Firebase Auth
2. Al registrarse, se crea el documento del usuario en Firestore con rol "free"
3. Al iniciar sesi√≥n, el frontend consulta el rol desde Firestore
4. Si es "premium", se habilita el input del chat
5. Cada request al backend `/chat` o `/upload` debe enviar el JWT ID Token de Firebase
6. El backend verifica la identidad y el rol del usuario antes de responder

---

üõ†Ô∏è Roadmap de desarrollo

**Fase 1: Autenticaci√≥n con Firebase (1‚Äì2 d√≠as)**  
- Configurar Firebase project  
- Habilitar Firebase Auth (email/password)  
- Agregar `firebase.js` al frontend  
- Implementar `register`, `login`, `logout` en React  
- Crear documento en Firestore con datos y rol al registrar  

**Fase 2: Control de acceso en frontend (1 d√≠a)**  
- Crear contexto de usuario (React Context API)  
- Consultar Firestore al cargar sesi√≥n  
- Mostrar u ocultar input de chat seg√∫n el rol  

**Fase 3: Backend con Flask y protecci√≥n (1‚Äì2 d√≠as)**  
- Verificar JWT ID Token con SDK Firebase Admin  
- Revisar rol del usuario antes de responder  
- Ruta `/chat`: recibe mensaje + archivo (si lo hay)  
- Procesa con OpenAI y responde  
- Ruta `/upload`: subir archivo o procesarlo en Flask  

**Fase 4: Historial de chat (1 d√≠a)**  
- Guardar mensaje y respuesta en Firestore  
- Eliminar el m√°s antiguo si hay m√°s de 5  

**Fase 5: Deploy (1 d√≠a)**  
- Frontend: Firebase Hosting (`vite build`)  
- Backend: Railway (configurar CORS, vars de entorno)  
- Test completo del flujo en producci√≥n

---

üîé Mostrame cada etapa con:

- Comandos exactos a ejecutar
- Archivos a modificar con ejemplos de c√≥digo
- Configuraciones necesarias (.env, Firebase, Railway)
- Buenas pr√°cticas de seguridad y manejo de errores en Flask
- C√≥mo probar todo el sistema de forma local y luego en producci√≥n
